package org.jpablo.graphexplorer.viewer.models

import upickle.default.*
import org.jpablo.graphexplorer.viewer.utils.Utils

// ---- Vertices ------

case class NodeId(value: String):
  override def toString: String = value

object NodeId:
  given rw: ReadWriter[NodeId] = stringKeyRW(readwriter[String].bimap[NodeId](_.value, NodeId(_)))

type ViewerKind = Option[String]

case class ViewerNode(
    id:          NodeId,
    displayName: String,
    kind:        ViewerKind = None
)

object ViewerNode:
  def node(name: String) =
    ViewerNode(NodeId(name), name)

// ---- Edges ------

case class ArrowId(value: String) extends AnyVal:
  override def toString: String = value

object ArrowId:
  def random(): ArrowId = ArrowId(Utils.randomUUID())

case class Arrow(
    source: NodeId,
    target: NodeId,
    idAttr: Option[String]
):

  // Re-create the string used by graphviz in the `<title>` element of the SVG.
  def nodeId: NodeId =
    NodeId(s"${source.value}->${target.value}" + idAttr.map(i => s":$i").getOrElse(""))

  import compiletime.asMatchable

  override def equals(obj: Any): Boolean = obj.asMatchable match
    case that: Arrow =>
      this.source == that.source && this.target == that.target && this.idAttr == that.idAttr
    case _ => false

  override def hashCode(): Int =
    (source, target, idAttr).##

  override def toString: String = s"Arrow(${idAttr.getOrElse("")})"

end Arrow

object Arrow:

  def apply(t: (String, String), idx: Option[String]): Arrow =
    new Arrow(NodeId(t._1), NodeId(t._2), idx)

  // Expects `title` to be the "<title>" generated by graphviz for arrows.
  // `idAttr` is used to disambiguate multiple arrows between the same nodes.
  def fromGraphvizTitle(title: String, idAttr: String): Option[Arrow] =
    val i = title.indexOf("->")
    if i > 0 && i < title.length - 2 then
      val l = title.substring(0, i).trim
      val r = title.substring(i + 2).trim
      if l.nonEmpty && r.nonEmpty then Some(Arrow(NodeId(l), NodeId(r), Some(idAttr)))
      else None
    else None
