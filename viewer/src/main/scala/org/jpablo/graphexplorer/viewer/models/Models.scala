package org.jpablo.graphexplorer.viewer.models

import upickle.default.*
import org.jpablo.graphexplorer.viewer.utils.Utils

// ---- Vertices ------

case class NodeId(value: String):
  override def toString: String = value

object NodeId:
  given rw: ReadWriter[NodeId] = stringKeyRW(readwriter[String].bimap[NodeId](_.value, NodeId(_)))

type ViewerKind = Option[String]

case class ViewerNode(
    id:          NodeId,
    displayName: String,
    kind:        ViewerKind = None
)

object ViewerNode:
  def node(name: String) =
    ViewerNode(NodeId(name), name)

// ---- Edges ------

case class ArrowId(value: String) extends AnyVal:
  override def toString: String = value

object ArrowId:
  def random(): ArrowId = ArrowId(Utils.randomUUID())

case class Arrow(
    source: NodeId,
    target: NodeId,
    idx0:   Option[Int] = None
):
  val idx =
    idx0.getOrElse(Arrow.nextId)

  org.scalajs.dom.console.log(s"Arrow.apply: ($idx) $source -> $target")

  def nodeId: NodeId =
    NodeId(s"edge$idx")

  def toTuple: (NodeId, NodeId, Int) =
    (source, target, idx)

  import compiletime.asMatchable

  override def equals(obj: Any): Boolean = obj.asMatchable match
    case that: Arrow =>
      this.source == that.source && this.target == that.target && this.idx == that.idx
    case _ => false

  override def hashCode(): Int =
    (source, target, idx).##

  override def toString: String = s"Arrow($source -> $target, $idx)"

end Arrow

object Arrow:
  private var idx = 0

  private def nextId =
    idx += 1
    idx

  def apply(t: (String, String)): Arrow =
    new Arrow(NodeId(t._1), NodeId(t._2))

  // This matches the "<title>" generated by graphviz for arrows
  def fromGraphvizTitle(title: String, idAttr: String): Option[Arrow] =
    val edgeIdx: Int = idAttr.replace("edge", "").toInt
    val i = title.indexOf("->")
    if i > 0 && i < title.length - 2 then
      val l = title.substring(0, i).trim
      val r = title.substring(i + 2).trim
      if l.nonEmpty && r.nonEmpty then Some(Arrow(NodeId(l), NodeId(r), Some(edgeIdx)))
      else None
    else None
